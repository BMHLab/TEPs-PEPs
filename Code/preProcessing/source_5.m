clear; clc;

% Subject ID
ID = {'001';'002';'003';'004';'005';'006';'007';'008';'009';'010';'011';'012';'013';'014';'015';'016';'017';'019';'020';'021'};

% Conditions
condition = {'control';'low';'high'};

% Brainstorm data path
pathBSdata = '/Volumes/Mana_HD/brainstorm_db/StudyI_spPP/data';

% Analyzed data path
pathData = '/Volumes/BACKUP_HD/MANA_TMS_EEG/Analyzed/';

% Initiate Brainstorm GUI
if ~brainstorm('status')
    brainstorm nogui
end

ProtocolName = 'StudyI_spPP';

% Get the protocol index
iProtocol = bst_get('Protocol', ProtocolName);
if isempty(iProtocol)
    error(['Unknown protocol: ' ProtocolName]);
end

% Select the current procotol
gui_brainstorm('SetCurrentProtocol', iProtocol);

% To delete the existing source results
% oldSourceResults = bst_process('CallProcess', 'process_select_files_results', [], [], ...
%     'subjectname',   '', ...% '' for all subjects
%     'tag',           'EEG', ... % Avg to delete Avg source results; 'EEG' to delete all source results
%     'includeintra',  1);
% bst_process('CallProcess', 'process_delete', [oldSourceResults], [], ...
%  'target', 1);

for idx = 1:length(ID)
    
    % Load sFileEp
    load([pathData,ID{idx},filesep,ID{idx},'_bs_settings.mat']);
    sFilesAv = [];
    sFileZ =[];
    
    for conds = 1:length(condition)
        % Process: Compute covariance (noise or data)
        sFileNoise.(condition{conds}) = bst_process('CallProcess', 'process_noisecov',  sFilesAvTrial.(condition{conds}), [], ...
            'baseline',       [-1, -0.02], ...
            'datatimewindow', [0, 1], ...
            'sensortypes',    'EEG', ...
            'target',         1, ...  % Noise covariance (covariance over baseline time window)
            'dcoffset',       1, ...  % Block by block, to avoid effects of slow shifts in data
            'identity',       0, ...
            'copycond',       0, ...
            'copysubj',       0, ...
            'replacefile',    1);  % Replace
        
        % Process: Compute sources [2018]
        sFilesAvTrial.(condition{conds}) = bst_process('CallProcess', 'process_inverse_2018', sFileNoise.(condition{conds}), [], ...
            'output',  2, ... 
            'inverse', struct(...
            'Comment',        'MN: EEG', ...
            'InverseMethod',  'minnorm', ...
            'InverseMeasure', 'amplitude', ...
            'SourceOrient',   {{'fixed'}}, ...
            'Loose',          0.2, ...
            'UseDepth',       1, ...
            'WeightExp',      0.5, ...
            'WeightLimit',    10, ...
            'NoiseMethod',    'reg', ...
            'NoiseReg',       0.1, ...
            'SnrMethod',      'fixed', ...
            'SnrRms',         0.001, ...
            'SnrFixed',       3, ...
            'ComputeKernel',  1, ...
            'DataTypes',      {{'EEG'}}));
        
        % Process: Z-score normalization:
        sFileZ.(condition{conds}) = bst_process('CallProcess', 'process_baseline_norm',  sFilesAvTrial.(condition{conds}), [], ...
            'baseline',   [-0.300, -0.02], ...
            'source_abs', 0, ...
            'method',     'zscore' );
        
        % Process: Project on default anatomy
        sProjSrc.(condition{conds}) = bst_process('CallProcess', 'process_project_sources', sFileZ.(condition{conds}), [], ...
            'headmodeltype', 'surface');  % Cortex surface
        
        % Process: Spatial smoothing (3.00,abs)
        sProjSrcSmooth.(condition{conds}) = bst_process('CallProcess', 'process_ssmooth_surfstat', sProjSrc.(condition{conds}), [], ...
            'fwhm',       3, ...
            'overwrite',  1, ...
            'source_abs', 1);
    end
    
    % Save
    save( [pathData,ID{idx},'/',ID{idx},'_bs_settings4'],'sFileNoise','sFileEp','sFilesAvTrial','sFilesAv','sFileZ','sProjSrc','sProjSrcSmooth');
end